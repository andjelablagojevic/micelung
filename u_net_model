def create_unet_model(input_shape):
    inputs = Input(input_shape)
    c1 = Conv2D(16, 3, activation='relu', padding='same')(inputs)
    c1 = Dropout(0.3)(c1)
    c1 = Conv2D(16, 3, activation='relu', padding='same')(c1)
    p1 = MaxPooling2D(2)(c1)

    c2 = Conv2D(32, 3, activation='relu', padding='same')(p1)
    c2 = Dropout(0.3)(c2)
    c2 = Conv2D(32, 3, activation='relu', padding='same')(c2)
    p2 = MaxPooling2D(2)(c2)

    c3 = Conv2D(64, 3, activation='relu', padding='same')(p2)
    c3 = Dropout(0.3)(c3)
    c3 = Conv2D(64, 3, activation='relu', padding='same')(c3)
    p3 = MaxPooling2D(2)(c3)

    c4 = Conv2D(128, 3, activation='relu', padding='same')(p3)
    c4 = Dropout(0.3)(c4)
    c4 = Conv2D(128, 3, activation='relu', padding='same')(c4)
    p4 = MaxPooling2D(2)(c4)

    b = Conv2D(256, 3, activation='relu', padding='same')(p4)
    b = Conv2D(256, 3, activation='relu', padding='same')(b)
    b = Dropout(0.3)(b)

    u4 = Conv2DTranspose(128, 3, strides=2, activation='relu', padding='same')(b)
    u4 = concatenate([u4, c4])
    u4 = BatchNormalization()(u4)

    c4 = Conv2D(128, 3, activation='relu', padding='same')(u4)
    c4 = BatchNormalization()(c4)
    c4 = Dropout(0.3)(c4)
    c4 = Conv2D(128, 3, activation='relu', padding='same')(c4)
    c4 = BatchNormalization()(c4)

    u3 = Conv2DTranspose(64, 3, strides=2, activation='relu', padding='same')(c4)
    u3 = concatenate([u3, c3])
    u3 = BatchNormalization()(u3)

    c3 = Conv2D(64, 3, activation='relu', padding='same')(u3)
    c3 = BatchNormalization()(c3)
    c3 = Dropout(0.3)(c3)
    c3 = Conv2D(64, 3, activation='relu', padding='same')(c3)
    c3 = BatchNormalization()(c3)

    u2 = Conv2DTranspose(32, 3, strides=2, activation='relu', padding='same')(c3)
    u2 = concatenate([u2, c2])
    u2 = BatchNormalization()(u2)

    c2 = Conv2D(32, 3, activation='relu', padding='same')(u2)
    c2 = BatchNormalization()(c2)
    c2 = Dropout(0.3)(c2)
    c2 = Conv2D(32, 3, activation='relu', padding='same')(c2)
    c2 = BatchNormalization()(c2)

    u1 = Conv2DTranspose(16, 3, strides=2, activation='relu', padding='same')(c2)
    u1 = concatenate([u1, c1])
    u1 = BatchNormalization()(u1)

    c1 = Conv2D(16, 3, activation='relu', padding='same')(u1)
    c1 = BatchNormalization()(c1)
    c1 = Dropout(0.3)(c1)
    c1 = Conv2D(16, 3, activation='relu', padding='same')(c1)
    c1 = BatchNormalization()(c1)

    outputs = Conv2D(1, 1, activation='sigmoid')(c1)
    model = Model(inputs=inputs, outputs=outputs)

    return model
